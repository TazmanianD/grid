// Each section is labeled with a comment describing
// how much data the section takes when minified

// $breakpoints: "sm" "md" "lg" "freeze";
// $bleeds: "lg" "freeze";
// $used: "sm" "md" "lg";

// $sm--unit: 100vw / 64;
// $lg--unit: 100vw / 66;
// $freeze--unit: 1650px / 66;

// $ratios: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16;

// $map: (
//  sm--breakpoint: 0px,
//  sm--columns: 4,
//  sm--padding: 4,
//  sm--unit: $sm--unit,
//  md--breakpoint: 640px,
//  md--columns: 8,
//  md--padding: 2,
//  md--unit: $sm--unit,
//  lg--breakpoint: 1056px,
//  lg--columns: 16,
//  lg--padding: 1,
//  lg--unit: $lg--unit,
//  lg--width: 100vw,
//  freeze--breakpoint: 1650px,
//  freeze--padding: 1,
//  freeze--unit: $freeze--unit,
//  freeze--width: 1650px
// );

$ibm-grid: (
  "sm": (
    breakpoint: 0px,
    columns: 4,
    hideable: true,
    margin: false,
    next: "md",
    unit: (100vw / 16),
  ),
  "md": (
    breakpoint: 640px,
    columns: 8,
    hideable: true,
    margin: false,
    next: "lg",
    unit: (100vw / 32),
  ),
  "lg": (
    breakpoint: 1056px,
    columns: 16,
    hideable: true,
    margin: true,
    max: "max",
    unit: (100vw / 66),
  ),
  "max": (
    breakpoint: 1650px,
    columns: 16,
    margin: true,
    unit: 25px,
  )
);

html, body {
  margin: 0;
  overflow-x: hidden;
}

// Container
.ibm {
  box-sizing: border-box;
  margin: auto;
  max-width: map-get(map-get($ibm-grid, max), breakpoint);
  width: 100vw;

  @each $breakpoint, $values in $ibm-grid {
    @if map-get($values, margin) == true {
      @media (min-width: map-get($values, breakpoint)) {
        padding: 0 map-get($values, unit);
      }
    }
  }
}

// cols
.ibm,
.ibm-col-group {
  display: flex;
  flex-wrap: wrap;

  > * {
    width: 100vw;
  }
}

.ibm > *,
.ibm-col-group > *,
.ibm-col-full_padding,
.ibm-col-ratio_content {
  box-sizing: border-box;
  padding: map-get(map-get($ibm-grid, sm), unit);

  &.ibm-col-tall {
    padding: 2 * map-get(map-get($ibm-grid, sm), unit) map-get(map-get($ibm-grid, sm), unit);
  }

  > *:first-child {
    margin-top: 0;
  }

  > *:last-child {
    margin-bottom: 0;
  }

  @each $breakpoint, $values in $ibm-grid {
    @if map-get($values, breakpoint) {
      @media (min-width: map-get($values, breakpoint)) {
        padding: map-get($values, unit);

        &.ibm-col-tall {
          padding: 2 * map-get($values, unit) map-get($values, unit);
        }
      }
    }
  }
}

.ibm > *,
.ibm-col-group > * {
  width: 100%;
}

.ibm-col-group,
.ibm-col-full {
  padding: 0;
  position: relative;
}

@each $breakpoint, $values in $ibm-grid {
  @if map-get($values, hideable) == true {
    @media (min-width: map-get($values, breakpoint)) {
      .ibm-col-#{$breakpoint}-0,
      .ibm-col-#{$breakpoint}-0-only {
        display: none;
      }
    }

    @if map-get($ibm-grid, map-get($values, next)) {
      @media (min-width: map-get(map-get($ibm-grid, map-get($values, next)), breakpoint)) {
        .ibm-col-#{$breakpoint}-0[class^="ibm-col-#{map-get($values, next)}-"],
        .ibm-col-#{$breakpoint}-0-only {
          display: initial;

          &.ibm-col-group {
            display: flex;
          }
        }
      }
    }
  }
}

@each $breakpoint, $values in $ibm-grid {
  @if $breakpoint != 'max' {
    $a: 1;
    @while $a <= map-get($values, columns) {
      .ibm-col-#{$breakpoint}-#{$a} {
        @if $breakpoint != 'lg' {
          @media (min-width: map-get($values, breakpoint)) {
            width: 100vw / map-get($values, columns) * $a;
          }
        }

        @media (min-width: map-get(map-get($ibm-grid, lg), breakpoint)) {
          max-width: (map-get(map-get($ibm-grid, max), breakpoint) - map-get(map-get($ibm-grid, max), unit) * 2) / map-get($values, columns) * $a;
          width: (100vw - map-get(map-get($ibm-grid, lg), unit) * 2) / map-get($values, columns) * $a;
        }
      }
      $a: $a + 1;
    }
  }
}
