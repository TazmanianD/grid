$ibm-grid: (
  "sm": (
    breakpoint: 0px,
    columns: 4,
    heights: 16,
    hideable: true,
    margin: false,
    next: "md",
    unit: (100vw / 16),
  ),
  "md": (
    breakpoint: 640px,
    columns: 8,
    heights: 16,
    hideable: true,
    margin: false,
    next: "lg",
    unit: (100vw / 32),
  ),
  "lg": (
    breakpoint: 1056px,
    columns: 16,
    heights: 33,
    hideable: true,
    margin: true,
    max: "max",
    unit: (100vw / 66),
  ),
  "max": (
    breakpoint: 1650px,
    columns: 16,
    margin: true,
    unit: 25px,
  )
);

html, body {
  margin: 0;
  overflow-x: hidden;
}

// Container
.ibm {
  box-sizing: border-box;
  margin: auto;
  max-width: map-get(map-get($ibm-grid, max), breakpoint);
  width: 100vw;

  @each $breakpoint, $values in $ibm-grid {
    @if map-get($values, margin) == true {
      @media (min-width: map-get($values, breakpoint)) {
        padding: 0 map-get($values, unit);
      }
    }
  }
}

// cols
.ibm,
.ibm-col-group {
  display: flex;
  flex-wrap: wrap;

  > * {
    width: 100vw;
  }
}

.ibm > *,
.ibm-col-group > *,
.ibm-col-full_padding,
.ibm-col-ratio_content {
  box-sizing: border-box;
  padding: map-get(map-get($ibm-grid, sm), unit);

  > *:first-child {
    margin-top: 0;
  }

  > *:last-child {
    margin-bottom: 0;
  }

  @each $breakpoint, $values in $ibm-grid {
    @if map-get($values, breakpoint) {
      @if $breakpoint != 'sm' {
        @media (min-width: map-get($values, breakpoint)) {
          padding: map-get($values, unit);
        }
      } @else {
        padding: map-get($values, unit);
      }
    }
  }
}

@each $breakpoint, $values in $ibm-grid {
  .ibm-col-tall {
    padding-bottom: 2 * map-get($values, unit);
    padding-top: 2 * map-get($values, unit);
  }
}

.ibm > *,
.ibm-col-group > * {
  width: 100%;
}

.ibm-col-group,
.ibm-col-full {
  padding: 0;
  position: relative;
}

@each $breakpoint, $values in $ibm-grid {
  @if map-get($values, hideable) {
    @if $breakpoint != 'sm' {
      @media (min-width: map-get($values, breakpoint)) {
        [class^="ibm-col-#{$breakpoint}-0"] {
          display: none;
        }
      }
    } @else {
      [class^="ibm-col-#{$breakpoint}-0"] {
        display: none;
      }
    }

    @if map-get($ibm-grid, map-get($values, next)) {
      @media (min-width: map-get(map-get($ibm-grid, map-get($values, next)), breakpoint)) {
        .ibm-col-#{$breakpoint}-0[class^="ibm-col-#{map-get($values, next)}-"],
        .ibm-col-#{$breakpoint}-0-only {
          display: initial;

          &.ibm-col-group {
            display: flex;
          }
        }
      }
    }
  }
}

@each $breakpoint, $values in $ibm-grid {
  @if $breakpoint != 'max' {
    @if $breakpoint != 'lg' {
      @if $breakpoint != 'sm' {
        @media (min-width: map-get($values, breakpoint)) {
          $a: 1;
          @while $a <= map-get($values, columns) {
            .ibm-col-#{$breakpoint}-#{$a} {
              width: 100vw / map-get($values, columns) * $a;
            }
            $a: $a + 1;
          }
        }
      } @else {
        $a: 1;
        @while $a <= map-get($values, columns) {
          .ibm-col-#{$breakpoint}-#{$a} {
            width: 100vw / map-get($values, columns) * $a;
          }
          $a: $a + 1;
        }
      }
    }
    
    
    @media (min-width: map-get(map-get($ibm-grid, lg), breakpoint)) {
      $a: 1;
      @while $a <= map-get($values, columns) {
        .ibm-col-#{$breakpoint}-#{$a} {
          max-width: (map-get(map-get($ibm-grid, max), breakpoint) - map-get(map-get($ibm-grid, max), unit) * 2) / map-get($values, columns) * $a;
          width: (100vw - map-get(map-get($ibm-grid, lg), unit) * 2) / map-get($values, columns) * $a;

          &[class*="ibm-col-bleed-"] {
            max-width: (map-get(map-get($ibm-grid, max), breakpoint) - map-get(map-get($ibm-grid, max), unit) * 2) / map-get($values, columns) * $a + map-get(map-get($ibm-grid, max), unit);
            width: (100vw - map-get(map-get($ibm-grid, lg), unit) * 2) / map-get($values, columns) * $a + map-get(map-get($ibm-grid, lg), unit);
          }
        }
        $a: $a + 1;
      }
    }
  }
}
